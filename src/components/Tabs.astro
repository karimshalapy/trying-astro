---
export interface Props {
  activeTextColor?: string;
  content: {
    heading: string;
    code: string;
  }[];
}

const { activeTextColor, content = [] } = Astro.props as Props;
---

{
  !!content.length && (
    <div class="tabs mt-8">
      <ul class="tabs-header flex bg-gray-800 text-white px-5 py-2">
        {content.map(({ heading }, i) => (
          <li class={`${!i && "default-tab"} mr-5 cursor-pointer`}>
            {heading}
          </li>
        ))}
      </ul>
      <ul class="tabs-content text-lg p-5 border-gray-800 border  font-bold bg-slate-100">
        {content.map(({ code }) => (
          <li class="tab">
            <code>{code}</code>
          </li>
        ))}
      </ul>
    </div>
  )
}

<script define:vars={{ activeTextColor }}>
  function createTabs(element, activeColor = "#A741FF") {
    const header = element.querySelector(".tabs-header");
    const content = element.querySelector(".tabs-content");
    if (!header || !content) return;
    const tab_headers = [...header.children];
    const tab_contents = [...content.children];
    tab_contents.forEach((x) => (x.style.display = "none"));
    let current_tab_index = -1;

    function setTab(index) {
      if (current_tab_index > -1) {
        tab_headers[current_tab_index].style.fontWeight = "400";
        tab_headers[current_tab_index].style.color = "#fff";
        tab_contents[current_tab_index].style.display = "none";
      }
      tab_headers[index].style.fontWeight = "800";
      tab_headers[index].style.color = activeColor;
      tab_contents[index].style.display = "flex";
      current_tab_index = index;
    }

    let default_tab_index = tab_headers.findIndex((x) => {
      return [...x.classList].indexOf("default-tab") > -1;
    });

    default_tab_index = default_tab_index === -1 ? 0 : default_tab_index;
    setTab(default_tab_index);
    tab_headers.forEach((x, i) => (x.onclick = (event) => setTab(i)));
  }

  // Run
  [...document.querySelectorAll(".tabs")].forEach((x) =>
    createTabs(x, activeTextColor)
  );
</script>
